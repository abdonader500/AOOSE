/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package aoose_main.gui;

import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import javax.swing.*;
import org.bson.Document;

import static com.mongodb.client.model.Filters.*;

public class RemoveInsurance extends javax.swing.JPanel {
    private MongoDatabase database;
    private int loggedInProviderId;

    /**
     * Creates new form RemoveInsurance
     */
    public RemoveInsurance(MongoDatabase database, int loggedInProviderId) {
        this.database = database;
        this.loggedInProviderId = loggedInProviderId;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        jLabel1.setText("insurance id");

        jButton1.setText("remove");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel1)
                .addGap(78, 78, 78)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(134, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(91, 91, 91)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(81, 81, 81)
                .addComponent(jButton1)
                .addContainerGap(83, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
try {
            // Parse the insurance ID from the input field
            String insuranceIdStr = jTextField1.getText();
            if (insuranceIdStr.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Insurance ID cannot be empty.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            int insuranceId;
            try {
                insuranceId = Integer.parseInt(insuranceIdStr);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Insurance ID must be a valid number.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Access the insurance collection in the database
            MongoCollection<Document> insuranceCollection = database.getCollection("insurances");

            // Check if the insurance exists and belongs to the logged-in provider
            Document insurance = insuranceCollection.find(and(eq("insuranceID", insuranceId), eq("insuranceProviderID", loggedInProviderId))).first();
            if (insurance == null) {
                JOptionPane.showMessageDialog(this, "Insurance not found or does not belong to you.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Remove the insurance
            insuranceCollection.deleteOne(eq("insuranceID", insuranceId));
            JOptionPane.showMessageDialog(this, "Insurance removed successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "An error occurred while removing the insurance.", "Error", JOptionPane.ERROR_MESSAGE);
        }    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
